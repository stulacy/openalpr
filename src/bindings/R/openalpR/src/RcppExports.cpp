// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// initialize_cpp
void initialize_cpp(std::string country, std::string configFile, std::string runtimeDir);
RcppExport SEXP _openalpR_initialize_cpp(SEXP countrySEXP, SEXP configFileSEXP, SEXP runtimeDirSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type country(countrySEXP);
    Rcpp::traits::input_parameter< std::string >::type configFile(configFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type runtimeDir(runtimeDirSEXP);
    initialize_cpp(country, configFile, runtimeDir);
    return R_NilValue;
END_RCPP
}
// close
void close();
RcppExport SEXP _openalpR_close() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    close();
    return R_NilValue;
END_RCPP
}
// is_loaded
bool is_loaded();
RcppExport SEXP _openalpR_is_loaded() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(is_loaded());
    return rcpp_result_gen;
END_RCPP
}
// recognize_file_cpp
std::string recognize_file_cpp(std::string imageFile);
RcppExport SEXP _openalpR_recognize_file_cpp(SEXP imageFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type imageFile(imageFileSEXP);
    rcpp_result_gen = Rcpp::wrap(recognize_file_cpp(imageFile));
    return rcpp_result_gen;
END_RCPP
}
// set_country
void set_country(std::string country);
RcppExport SEXP _openalpR_set_country(SEXP countrySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type country(countrySEXP);
    set_country(country);
    return R_NilValue;
END_RCPP
}
// set_prewarp
void set_prewarp(std::string prewarp);
RcppExport SEXP _openalpR_set_prewarp(SEXP prewarpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type prewarp(prewarpSEXP);
    set_prewarp(prewarp);
    return R_NilValue;
END_RCPP
}
// set_default_region
void set_default_region(std::string default_region);
RcppExport SEXP _openalpR_set_default_region(SEXP default_regionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type default_region(default_regionSEXP);
    set_default_region(default_region);
    return R_NilValue;
END_RCPP
}
// setDetectRegion_cpp
void setDetectRegion_cpp(bool detect_region);
RcppExport SEXP _openalpR_setDetectRegion_cpp(SEXP detect_regionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type detect_region(detect_regionSEXP);
    setDetectRegion_cpp(detect_region);
    return R_NilValue;
END_RCPP
}
// set_top_n
void set_top_n(int top_n);
RcppExport SEXP _openalpR_set_top_n(SEXP top_nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type top_n(top_nSEXP);
    set_top_n(top_n);
    return R_NilValue;
END_RCPP
}
// get_version
std::string get_version();
RcppExport SEXP _openalpR_get_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_version());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_openalpR_initialize_cpp", (DL_FUNC) &_openalpR_initialize_cpp, 3},
    {"_openalpR_close", (DL_FUNC) &_openalpR_close, 0},
    {"_openalpR_is_loaded", (DL_FUNC) &_openalpR_is_loaded, 0},
    {"_openalpR_recognize_file_cpp", (DL_FUNC) &_openalpR_recognize_file_cpp, 1},
    {"_openalpR_set_country", (DL_FUNC) &_openalpR_set_country, 1},
    {"_openalpR_set_prewarp", (DL_FUNC) &_openalpR_set_prewarp, 1},
    {"_openalpR_set_default_region", (DL_FUNC) &_openalpR_set_default_region, 1},
    {"_openalpR_setDetectRegion_cpp", (DL_FUNC) &_openalpR_setDetectRegion_cpp, 1},
    {"_openalpR_set_top_n", (DL_FUNC) &_openalpR_set_top_n, 1},
    {"_openalpR_get_version", (DL_FUNC) &_openalpR_get_version, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_openalpR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
